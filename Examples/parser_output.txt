cat division (a b) { if (b == 0) { 0 } else { a / b }};

division (10 2)

List [symbol cat, symbol division, List [symbol a, symbol b],
    List [symbol if, List [symbol b, symbol ==, number 0],
        List [symbol vomit, List [Literal "...", Number 84]],
    symbol else,
        List [symbol a, symbol /, symbol b]
        ],

symbol division, List [number 10, number 2]]

(env, instructions)

([("division", [
    PushArg 0,
    Push (Numerical 0),
    Push (Operator Ne),
    Call,
    JumpIfFalse 6,
    PushArg 1,
    PushArg 0,
    Push (Operator Div),
    Call,
    Ret,
    Push (Literal "..."),
    Push (Operator Print),
    Call,
    Ret
])], [
    Push (Numerical 2),
    Push (Numerical, 10),
    Push "division"
    Call,
    Ret
    ]
)

[SList [SSymbol "cat" 1,SSymbol "factorial" 1,SList [SSymbol "n" 1],SList [SSymbol "if" 2,SList [SSymbol "n" 2,SSymbol "==" 2,SNumber 1 2],SList [SNumber 1 3],SSymbol "else" 4,SList [SSymbol "factorial" 5,SList [SSymbol "n" 5,SSymbol "-" 5,SNumber 1 5],SSymbol "*" 5,SSymbol "n" 5]]]]
[SList [SSymbol "cat" 1,SSymbol "factorial" 1,SList [SSymbol "n" 1],SList [SSymbol "if" 2,SList [SSymbol "n" 2,SSymbol "==" 2,SNumber 1 2],SList [SNumber 1 3],SSymbol "else" 4,SList [SSymbol "factorial" 5,SList [SSymbol "n" 5,SSymbol "-" 5,SNumber 1 5],SSymbol "*" 5,SSymbol "n" 5]]],SList [SSymbol "factorial" 9,SList [SNumber 5 9]]]

function is_prime(x) { if (typeOf(x) != "integer" or x <= 1) { return False; } end = int(sqrt(x)) + 1; for (n = 2; n < end; n = n + 1) { if (x % n == 0) { return False; } } return True; }
